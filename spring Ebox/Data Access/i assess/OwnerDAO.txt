package com.spring.dao;

import com.spring.entity.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;
import javax.sql.DataSource;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Component;

@Component("ownerDAO")
public class OwnerDAO {
    
    private DataSource datasource;
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    public DataSource getDataSource()
        {
            return datasource;
        }
        public void setDataSource(DataSource dataSource)
        {
            this.jdbcTemplate= new JdbcTemplate(dataSource);
        }
    
	public List<Owner> getAllOwners(){
       try{ //fill your code
        String SQL = "select * from owner ";
      List <Owner> events = jdbcTemplate.query(SQL,new OwnerMapper());
      return events;
       }
       catch(EmptyResultDataAccessException e){
         return new ArrayList<Owner>();
       }
    }
    
    public String getOwnerById(int id){
    	try {
		    String SQL = "select * from Owner where id ="+ id;
		    Owner owner = jdbcTemplate.queryForObject(SQL,new OwnerMapper());
		    return owner.getName();
    	}
    	catch(EmptyResultDataAccessException e) {
    		return null;
    	}
    }
    public void update(int id, String mobile, String email) {
    	
    		String SQL = "UPDATE owner SET mobile_number = '"+mobile+"' , email_id = '"+email +"' WHERE id="+id;
    		jdbcTemplate.update(SQL);
    }
	public void printAll() {
		System.out.println("... Owner List ...");
		System.out.printf("%-15s %-15s %-15s %s\n","Id","Name","Email","Mobile");
		List<Owner> owners = getAllOwners();
		for(Owner x : owners) System.out.println(x);
	}
    
}

final class OwnerMapper implements RowMapper<Owner>{

    public Owner mapRow(ResultSet rs, int rowNum) throws SQLException {
        Owner event= new Owner();
        event.setId(rs.getInt("id"));
        event.setName(rs.getString("name"));
        event.setPassword(rs.getString("password"));
        event.setEmailId(rs.getString("email_id"));
        event.setMobileNumber(rs.getString("mobile_number"));
        return event;
    }
}
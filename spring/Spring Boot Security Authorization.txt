package com.springboot.repository;

import java.util.List;

import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

import com.springboot.domain.Product;


@Repository("productRepository")
public interface ProductRepository extends CrudRepository<Product, Long>{
    List<Product> findByIsAvailable(Boolean isAvailable);
}


*********************************


package com.springboot.repository;
import org.springframework.stereotype.Repository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import com.springboot.domain.User;

@Repository("userRepository")
public interface UserRepository extends  CrudRepository<User,Long>{

	public User findByUsername(String username);
}





****************************



package com.springboot;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringAuthorizationApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringAuthorizationApplication.class, args);
	}

}




*******************************



package com.springboot.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.repository.ProductRepository;
import com.springboot.domain.Product;
@RestController
public class ProductController {
	
	
	@Autowired
	private ProductRepository pr;
	
	@GetMapping("product/viewAll")
	List<Product> list(){
		List<Product> list =new ArrayList<>();
		pr.findAll().forEach(x->list.add(x));
		return list;
	}
	
	@GetMapping("/product/list")
	List<Product> listAvailableProduct(){
		List<Product> list=new ArrayList<Product>();
		pr.findByIsAvailable(true).forEach(x->list.add(x));
		return list;
	}
}

**********************************


package com.springboot.controller;

import java.security.Principal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.repository.UserRepository;

@RestController
public class UserController {
	
	@Autowired
	private UserRepository ur;
	
	@RequestMapping(value = "/", method = RequestMethod.GET)
	String welcome(Principal p) {
		return "Welcome to Online Shopping "+p.getName();
	}
	
}




********************************


package com.springboot.service;

import java.util.Collection;
import java.util.Collections;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User.UserBuilder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.springboot.domain.User;
import com.springboot.repository.UserRepository;


public class UserService implements UserDetailsService {

	@Autowired
	UserRepository ur;
	@Autowired
	PasswordEncoder passwordencoder;
	
	public UserDetails loadUserByUsername(String username) {
		User u=ur.findByUsername(username);
		if(u==null) {
			throw new UsernameNotFoundException("Not found");
		}
		return new UserDetails() {
			
			@Override
			public boolean isEnabled() {
				
				return true;
			}
			
			@Override
			public boolean isCredentialsNonExpired() {
			
				return true;
			}
			
			@Override
			public boolean isAccountNonLocked() {
				
				return true;
			}
			
			@Override
			public boolean isAccountNonExpired() {
			
				return true;
			}
			
			@Override
			public String getUsername() {
				
				return u.getName();
			}
			
			@Override
			public String getPassword() {
				
				return passwordencoder.encode(u.getPassword());
			}
			
			@Override
			public Collection<? extends GrantedAuthority> getAuthorities() {
				
				return Collections.singleton(new SimpleGrantedAuthority(u.getRole()));
			}
		};
	}

}



****************************************



package com.springboot.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.springboot.service.UserService;

@Configuration
@ComponentScan({"com.springboot"})
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
	

	@Autowired
	UserService userservice;
	@Autowired
	PasswordEncoder passwordencoder;
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.httpBasic()
	    .and()
		.authorizeRequests()
        .antMatchers(HttpMethod.GET,"/product/viewAll").hasAnyAuthority("ADMIN")	
        .antMatchers(HttpMethod.GET,"/product/list").hasAnyAuthority("ADMIN","CUSTOMER")
        .anyRequest().authenticated()
        .and()
        .logout().permitAll()
        .and()
        .formLogin();
	}
	

	protected void configureGlobal(AuthenticationManagerBuilder auth) throws Exception{
		auth.userDetailsService(userservice);
;
	}
	
	@Bean
	public UserService userDetailsService() {
	  
		return new UserService();
	};
	
	@Bean
    public BCryptPasswordEncoder passwordEncoder() {
	   
		return new BCryptPasswordEncoder();
	};


}



**********************************


package com.springboot.domain;


import javax.persistence.*;


@Entity
@Table(name = "product")
public class Product {
	@Id
    @GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name="id")
	Long id;
	@Column(name="name")
	String name;
	@Column(name="brand_name")
	String brandName;
	@Column(name="price")
	Double price;
	@Column(name="rating")
	Double rating;
	@Column(name="is_available")
	Boolean isAvailable;
	
	public Product() {
		super();
	}

	public Product(Long id, String name, String brandName, Double price, Double rating, Boolean isAvailable) {
		super();
		this.id = id;
		this.name = name;
		this.brandName = brandName;
		this.price = price;
		this.rating = rating;
		this.isAvailable = isAvailable;
	}
	
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getBrandName() {
		return brandName;
	}
	public void setBrandName(String brandName) {
		this.brandName = brandName;
	}
	public Double getPrice() {
		return price;
	}
	public void setPrice(Double price) {
		this.price = price;
	}
	public Double getRating() {
		return rating;
	}
	public void setRating(Double rating) {
		this.rating = rating;
	}
	public Boolean getIsAvailable() {
		return isAvailable;
	}
	public void setIsAvailable(Boolean isAvailable) {
		this.isAvailable = isAvailable;
	}
}



************************


package com.springboot.domain;

import javax.persistence.*;


@Entity
@Table(name = "user")
public class User {
	@Id
    @GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name="id")
	private Long id;
	@Column(name="name")
	private String name;
	@Column(name="username")
	private String username;
	@Column(name="password")
	private String password;
	@Column(name="role")
	private String role;
	
	public User() {
		super();
	}

	public User(Long id, String name, String username, String password, String role) {
		super();
		this.id = id;
		this.name = name;
		this.username = username;
		this.password = password;
		this.role = role;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getRole() {
		return role;
	}

	public void setRole(String role) {
		this.role = role;
	}
	
}
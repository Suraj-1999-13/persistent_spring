package com.weather.jpa.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.weather.jpa.domain.WeatherReport;
import com.weather.jpa.repository.WeatherRepository;

@RestController
public class WeatherController {
	@Autowired
	private WeatherRepository repository;
	
	@GetMapping("/weatherReport")
	public List<WeatherReport> getData()
	{
		return (List<WeatherReport>) repository.findAll();
	}
	
	@PostMapping("/weatherReport")
	public WeatherReport addUsers(@RequestBody WeatherReport cases)
	{
		return repository.save(cases);
	}
	
	@PutMapping("/weatherReport")
	public WeatherReport updateUsers(@RequestBody WeatherReport cases)
	{   
		WeatherReport existingReport = repository.findById(cases.getId()).orElse(null);
    	existingReport.setCity(cases.getCity());
    	existingReport.setMaxTemperature(cases.getMaxTemperature());
    	existingReport.setMinTemperature(cases.getMinTemperature());
        return repository.save(existingReport);
		
	}
	
	@GetMapping("/weatherReport/{id}")
	public WeatherReport view(@PathVariable Long id)
	{
		return repository.findById(id).orElse(null);
	}
	
	@DeleteMapping("/weatherReport/{id}")
	public Boolean deleteUsers(@PathVariable Long id)
	{
        if (repository.existsById(id)&& id!=null) {
        	repository.deleteById(id);
            return true;
        }
		return false;
	}
}

***************************


package com.weather.jpa.repository;

import org.springframework.stereotype.Repository;
import com.weather.jpa.domain.WeatherReport;
import org.springframework.data.repository.CrudRepository;
import java.util.Optional;
@Repository
public interface WeatherRepository extends CrudRepository<WeatherReport,Long>{

	Optional<WeatherReport> findById(Long id);

	boolean existsById(Long id);

	void deleteById(Long id);

}

***************************

package com.weather.jpa;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class WeatherJpaApplication {

	public static void main(String[] args) {
		SpringApplication.run(WeatherJpaApplication.class, args);
	}

}


***************************


package com.weather.jpa.domain;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "weather_report")
public class WeatherReport {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	@Column(name = "city")
	private String city;
	@Column(name = "min_temperature")
	private Double minTemperature;
	@Column(name = "max_temperature")
	private Double maxTemperature;
	
	public WeatherReport() {}

	public WeatherReport(Long id, String city, Double minTemperature, Double maxTemperature) {
		super();
		this.id = id;
		this.city = city;
		this.minTemperature = minTemperature;
		this.maxTemperature = maxTemperature;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public Double getMinTemperature() {
		return minTemperature;
	}

	public void setMinTemperature(Double minTemperature) {
		this.minTemperature = minTemperature;
	}

	public Double getMaxTemperature() {
		return maxTemperature;
	}

	public void setMaxTemperature(Double maxTemperature) {
		this.maxTemperature = maxTemperature;
	}
	
}

